# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  email: String
  isVerified: Boolean
  attendsUniversity: University
  reviewsMade(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  reviewsMadeCount(where: ReviewWhereInput! = {}): Int
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  isVerified: BooleanFilter
  attendsUniversity: UniversityWhereInput
  reviewsMade: ReviewManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  isVerified: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  email: String
  isVerified: Boolean
  attendsUniversity: UniversityRelateToOneForUpdateInput
  reviewsMade: ReviewRelateToManyForUpdateInput
}

input UniversityRelateToOneForUpdateInput {
  create: UniversityCreateInput
  connect: UniversityWhereUniqueInput
  disconnect: Boolean
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  email: String
  isVerified: Boolean
  attendsUniversity: UniversityRelateToOneForCreateInput
  reviewsMade: ReviewRelateToManyForCreateInput
}

input UniversityRelateToOneForCreateInput {
  create: UniversityCreateInput
  connect: UniversityWhereUniqueInput
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

type University {
  id: ID!
  name: String
  slug: String
  campusImage: ImageFieldOutput
  description: String
  location: String
  population: Int
  isApproved: Boolean
  students(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  studentsCount(where: UserWhereInput! = {}): Int
  hasCourses(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  hasCoursesCount(where: CourseWhereInput! = {}): Int
  overallRating(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  overallRatingCount(where: RatingWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input UniversityWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input UniversityWhereInput {
  AND: [UniversityWhereInput!]
  OR: [UniversityWhereInput!]
  NOT: [UniversityWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  location: StringFilter
  population: IntNullableFilter
  isApproved: BooleanFilter
  students: UserManyRelationFilter
  hasCourses: CourseManyRelationFilter
  overallRating: RatingManyRelationFilter
  reviews: ReviewManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input RatingManyRelationFilter {
  every: RatingWhereInput
  some: RatingWhereInput
  none: RatingWhereInput
}

input UniversityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  location: OrderDirection
  population: OrderDirection
  isApproved: OrderDirection
}

input UniversityUpdateInput {
  name: String
  slug: String
  campusImage: ImageFieldInput
  description: String
  location: String
  population: Int
  isApproved: Boolean
  students: UserRelateToManyForUpdateInput
  hasCourses: CourseRelateToManyForUpdateInput
  overallRating: RatingRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input RatingRelateToManyForUpdateInput {
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  create: [RatingCreateInput!]
  connect: [RatingWhereUniqueInput!]
}

input UniversityUpdateArgs {
  where: UniversityWhereUniqueInput!
  data: UniversityUpdateInput!
}

input UniversityCreateInput {
  name: String
  slug: String
  campusImage: ImageFieldInput
  description: String
  location: String
  population: Int
  isApproved: Boolean
  students: UserRelateToManyForCreateInput
  hasCourses: CourseRelateToManyForCreateInput
  overallRating: RatingRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input RatingRelateToManyForCreateInput {
  create: [RatingCreateInput!]
  connect: [RatingWhereUniqueInput!]
}

type Course {
  id: ID!
  courseCode: String
  courseTitle: String
  description: String
  isPopular: Boolean
  isApproved: Boolean
  courseAt: University
  courseRating(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  courseRatingCount(where: RatingWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
}

input CourseWhereUniqueInput {
  id: ID
  courseCode: String
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  courseCode: StringFilter
  courseTitle: StringFilter
  description: StringFilter
  isPopular: BooleanFilter
  isApproved: BooleanFilter
  courseAt: UniversityWhereInput
  courseRating: RatingManyRelationFilter
  reviews: ReviewManyRelationFilter
}

input CourseOrderByInput {
  id: OrderDirection
  courseCode: OrderDirection
  courseTitle: OrderDirection
  description: OrderDirection
  isPopular: OrderDirection
  isApproved: OrderDirection
}

input CourseUpdateInput {
  courseCode: String
  courseTitle: String
  description: String
  isPopular: Boolean
  isApproved: Boolean
  courseAt: UniversityRelateToOneForUpdateInput
  courseRating: RatingRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  courseCode: String
  courseTitle: String
  description: String
  isPopular: Boolean
  isApproved: Boolean
  courseAt: UniversityRelateToOneForCreateInput
  courseRating: RatingRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
}

type Review {
  id: ID!
  reviewSummary: String
  pros: String
  cons: String
  suggestions: String
  isApproved: Boolean
  datePosted: DateTime
  alumniYear: Int
  isAnon: Boolean
  inAppropriateCount: Int
  reviewBy(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  reviewByCount(where: UserWhereInput! = {}): Int
  rating(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  ratingCount(where: RatingWhereInput! = {}): Int
  reviewsOfUni: University
  reviewsOfCourse: Course
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  reviewSummary: StringFilter
  pros: StringFilter
  cons: StringFilter
  suggestions: StringFilter
  isApproved: BooleanFilter
  datePosted: DateTimeNullableFilter
  alumniYear: IntNullableFilter
  isAnon: BooleanFilter
  inAppropriateCount: IntNullableFilter
  reviewBy: UserManyRelationFilter
  rating: RatingManyRelationFilter
  reviewsOfUni: UniversityWhereInput
  reviewsOfCourse: CourseWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  reviewSummary: OrderDirection
  pros: OrderDirection
  cons: OrderDirection
  suggestions: OrderDirection
  isApproved: OrderDirection
  datePosted: OrderDirection
  alumniYear: OrderDirection
  isAnon: OrderDirection
  inAppropriateCount: OrderDirection
}

input ReviewUpdateInput {
  reviewSummary: String
  pros: String
  cons: String
  suggestions: String
  isApproved: Boolean
  datePosted: DateTime
  alumniYear: Int
  isAnon: Boolean
  inAppropriateCount: Int
  reviewBy: UserRelateToManyForUpdateInput
  rating: RatingRelateToManyForUpdateInput
  reviewsOfUni: UniversityRelateToOneForUpdateInput
  reviewsOfCourse: CourseRelateToOneForUpdateInput
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  reviewSummary: String
  pros: String
  cons: String
  suggestions: String
  isApproved: Boolean
  datePosted: DateTime
  alumniYear: Int
  isAnon: Boolean
  inAppropriateCount: Int
  reviewBy: UserRelateToManyForCreateInput
  rating: RatingRelateToManyForCreateInput
  reviewsOfUni: UniversityRelateToOneForCreateInput
  reviewsOfCourse: CourseRelateToOneForCreateInput
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

type Rating {
  id: ID!
  ratingType: String
  rating: Float
  reviewRating: Review
  ratingForUni: University
  ratingForCourse: Course
}

input RatingWhereUniqueInput {
  id: ID
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
  id: IDFilter
  ratingType: StringNullableFilter
  rating: FloatNullableFilter
  reviewRating: ReviewWhereInput
  ratingForUni: UniversityWhereInput
  ratingForCourse: CourseWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input RatingOrderByInput {
  id: OrderDirection
  ratingType: OrderDirection
  rating: OrderDirection
}

input RatingUpdateInput {
  ratingType: String
  rating: Float
  reviewRating: ReviewRelateToOneForUpdateInput
  ratingForUni: UniversityRelateToOneForUpdateInput
  ratingForCourse: CourseRelateToOneForUpdateInput
}

input ReviewRelateToOneForUpdateInput {
  create: ReviewCreateInput
  connect: ReviewWhereUniqueInput
  disconnect: Boolean
}

input RatingUpdateArgs {
  where: RatingWhereUniqueInput!
  data: RatingUpdateInput!
}

input RatingCreateInput {
  ratingType: String
  rating: Float
  reviewRating: ReviewRelateToOneForCreateInput
  ratingForUni: UniversityRelateToOneForCreateInput
  ratingForCourse: CourseRelateToOneForCreateInput
}

input ReviewRelateToOneForCreateInput {
  create: ReviewCreateInput
  connect: ReviewWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUniversity(data: UniversityCreateInput!): University
  createUniversities(data: [UniversityCreateInput!]!): [University]
  updateUniversity(
    where: UniversityWhereUniqueInput!
    data: UniversityUpdateInput!
  ): University
  updateUniversities(data: [UniversityUpdateArgs!]!): [University]
  deleteUniversity(where: UniversityWhereUniqueInput!): University
  deleteUniversities(where: [UniversityWhereUniqueInput!]!): [University]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createRating(data: RatingCreateInput!): Rating
  createRatings(data: [RatingCreateInput!]!): [Rating]
  updateRating(where: RatingWhereUniqueInput!, data: RatingUpdateInput!): Rating
  updateRatings(data: [RatingUpdateArgs!]!): [Rating]
  deleteRating(where: RatingWhereUniqueInput!): Rating
  deleteRatings(where: [RatingWhereUniqueInput!]!): [Rating]
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  universities(
    where: UniversityWhereInput! = {}
    orderBy: [UniversityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [University!]
  university(where: UniversityWhereUniqueInput!): University
  universitiesCount(where: UniversityWhereInput! = {}): Int
  courses(
    where: CourseWhereInput! = {}
    orderBy: [CourseOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Course!]
  course(where: CourseWhereUniqueInput!): Course
  coursesCount(where: CourseWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  rating(where: RatingWhereUniqueInput!): Rating
  ratingsCount(where: RatingWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
